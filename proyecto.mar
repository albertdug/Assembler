.PSECT DATOS,NOEXE,WRT,LONG
        temp: .BLKL 20
        longTemp: .LONG 0
        descTemp: .LONG 20
		.LONG temp
        contOp: .LONG 0
        arrOp: .BLKL 30
        longOp: .LONG 0
        descArrOp: .LONG 30
		.LONG arrOp
        arrVar: .BLKL 8
        longArrVar: .LONG 8
        descArrVar: .LONG 8
		.LONG arrVar
		arrReg: .BLKL 8
        longArrReg: .LONG 8
        descArrReg: .LONG 8
		.LONG arrReg

        clr: .ASCID/CLR/
        mul: .ASCID/MUL/
        dec: .ASCID/DEC/
        inc: .ASCID/INC/
        add: .ASCID/ADD/
        sub: .ASCID/SUB/
        div: .ASCID/DIV/
        varA: .ASCID/A/
        varB: .ASCID/B/
        varC: .ASCID/C/
        varD: .ASCID/D/
        reg0: .ASCID/R0/
        reg1: .ASCID/R1/
        reg2: .ASCID/R2/
        reg3: .ASCID/R3/
        titulo: .ASCID/TRADUCTOR DE INSTRUCCIONES BINARIAS/
        barra: .ASCID/-----------------------------------/
        leerOp: .ASCID/Introduzca los codigos para los siguientes operandos: /
        leerVar: .ASCID/Introduzca los codigos para las variables: /
        leerReg: .ASCID/Introduzca los codigos para los registros: /
        mensajeErrorOp: .ASCID/Codigo de operacion invalido./
        mensajeErrorVar: .ASCID/Codigo de variable invalido./
        mensajeErrorReg: .ASCID/Codigo de registro invalido./
		mensajeDuplicado: .ASCID/El codigo introducido ya esta en uso. Ingrese otro codigo./

.MACRO VALIDARC arreglo,longitud,tamano,resultado,?Normal,?While,?EndWhile,?Then,?Else,?EndIf
	MOVL #1,resultado
	CMPL longitud,tamano
	BEQL Normal
	MOVL #0,resultado
	BRW EndWhile
	Normal:
	MOVAL arreglo,R7
	CLRL R8
	While: 
		CMPL r8,longitud
	    BGEQ EndWhile
		CMPB (R7)[R8], #^A/1/
		BEQL Then
		CMPB (r7)[r8], #^A/0/
		BNEQ Else
	    Then: 
			INCL r8
			BRW EndIf
	    Else:
	        MOVL #0,resultado
			BRW EndWhile
	    EndIf:
	    BRW While
	EndWhile:
.ENDM VALIDARC

.MACRO CADENAANUMERO cadena,inicio,fin,numero,?For,?If,?EndIf,?Return,?Salir
	TSTL fin
	BEQL Return
	CMPL inicio,fin
	BGTR Return
	MOVAL cadena,R0 ; Direccionamiento de cadena
	MOVL fin,R1 ; Indice del For (For R1:=fin down-to inicio)
	MOVL #1,R2 ; Multiplicador (1,10,100,...)
	CLRL R3 ; Resultado. Al final R3 se copiara a numero. Se usa R3 para mayor rapidez en las operaciones
	For:
		If: CMPB (R0)[R1],#^A/1/
		BNEQ EndIf
			ADDL R2,R3
		EndIf:
		MULL #10,R2
	ACBL inicio,#-1,R1,For
	MOVL R3,numero
	BRW Salir
	Return:
		MOVL #-1,numero
	Salir:
.ENDM CADENAANUMERO

.MACRO TRADUCIR arreglo,longitud,valor,resultado,?While,?EndIf,?Fin1,?Fin2
	MOVAL arreglo, R1
	CLRL R0
	While:
		CMPL R0, longitud
		BGEQ Fin1
		CMPL valor, (R1)[R0]
		BNEQ EndIf
		MOVAL R0, resultado
		BRW Fin2
		EndIf:
		INCL R0
		BRW While
	Fin1:
		MOVAL #-1,resultado
	Fin2:
.ENDM TRADUCIR

.MACRO LEERCODIGOS arreglo,longitud,temp,descTemp,longTemp,inicio,fin,mensaje,mensajeError,mensajeDuplicado,?While1,?EndWhile1,?While2,?EndWhile2,?For
    MOVL #20,descTemp
    SUBL3 inicio,fin,R10
    INCL R10
	While1:
		LEER longTemp,mensaje,descTemp
		VALIDARC temp,longTemp,R10,R6
	    While2:
	            TSTL R6
	            BNEQ EndWhile2
	            IMPRIMIR mensajeError
	            MOVL #20,descTemp
	            LEER longTemp,mensaje,descTemp
	            VALIDARC temp,longTemp,R10,R6
	            BRW While2
	    EndWhile2:
		CADENAANUMERO temp,#0,longTemp,R6
		TRADUCIR arreglo,longitud,R6,R7
		CMPL R7,#-1
		BEQL EndWhile1
		IMPRIMIR mensajeDuplicado
		BRW While1
	EndWhile1:
	MOVAL arreglo,R7
	MOVL R6,(R7)[longitud]
	INCL longitud
.ENDM LEERCODIGOS

.MACRO CARGARCODIGOSOP
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#0,#3,clr,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#4,#7,mul,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#8,#11,dec,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#12,#15,inc,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#16,#19,add,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#20,#23,sub,mensajeErrorOp,mensajeDuplicado
	LEERCODIGOS arrOp,longArrOp,temp,descTemp,longTemp,#24,#27,div,mensajeErrorOp,mensajeDuplicado
.ENDM CARGARCODIGOSOP

.MACRO CARGARCODIGOSVAR
	LEERCODIGOS arrVar,longArrVar,temp,descTemp,longTemp,#0,#1,varA,mensajeErrorVar,mensajeDuplicado
	LEERCODIGOS arrVar,longArrVar,temp,descTemp,longTemp,#2,#3,varB,mensajeErrorVar,mensajeDuplicado
	LEERCODIGOS arrVar,longArrVar,temp,descTemp,longTemp,#4,#5,varC,mensajeErrorVar,mensajeDuplicado
	LEERCODIGOS arrVar,longArrVar,temp,descTemp,longTemp,#6,#7,varD,mensajeErrorVar,mensajeDuplicado
.ENDM CARGARCODIGOSVAR

.MACRO CARGARCODIGOSREG
	LEERCODIGOS arrReg,longArrReg,temp,descTemp,longTemp,#0,#1,reg0,mensajeErrorReg,mensajeDuplicado
	LEERCODIGOS arrReg,longArrReg,temp,descTemp,longTemp,#2,#3,reg1,mensajeErrorReg,mensajeDuplicado
	LEERCODIGOS arrReg,longArrReg,temp,descTemp,longTemp,#4,#5,reg2,mensajeErrorReg,mensajeDuplicado
	LEERCODIGOS arrReg,longArrReg,temp,descTemp,longTemp,#6,#7,reg3,mensajeErrorReg,mensajeDuplicado
.ENDM CARGARCODIGOSREG

.MACRO LEER num, men, desc
	PUSHAL num
	PUSHAL men
	PUSHAL desc
	CALLS #3,g^lib$get_input
	MOVL num,desc
.ENDM LEER

.MACRO IMPRIMIR mensaje
	PUSHAL mensaje
	CALLS #1,g^lib$put_output
.ENDM IMPRIMIR

.PSECT CODIGO,EXE,NOWRT,LONG
.ENTRY programa,0
	IMPRIMIR leerOp
	CARGARCODIGOSOP
	IMPRIMIR descArrOp
	IMPRIMIR leerVar
	CARGARCODIGOSVAR
	IMPRIMIR descArrVar
	IMPRIMIR leerReg
	CARGARCODIGOSREG
	IMPRIMIR descArrReg
	RET
.END programa
